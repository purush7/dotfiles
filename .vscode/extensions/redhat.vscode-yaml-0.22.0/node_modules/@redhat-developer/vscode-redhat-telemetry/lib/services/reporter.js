"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Reporter = void 0;
const events_1 = require("../utils/events");
const logger_1 = require("../utils/logger");
/**
 * Sends Telemetry events to a segment.io backend
 */
class Reporter {
    constructor(analytics, idManager, environment) {
        this.analytics = analytics;
        this.idManager = idManager;
        this.environment = environment;
    }
    report(event) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            if (this.analytics) {
                event = events_1.enhance(event, this.environment);
                let payload = {
                    userId: yield this.idManager.getRedHatUUID(),
                    event: event.name,
                    properties: event.properties,
                    measures: event.measures,
                    traits: event.traits,
                    context: event.context
                };
                const type = (event.type) ? event.type : 'track';
                logger_1.Logger.log(`Sending ${type} event with\n${JSON.stringify(payload)}`);
                switch (type) {
                    case 'identify':
                        (_a = this.analytics) === null || _a === void 0 ? void 0 : _a.identify(payload);
                        break;
                    case 'track':
                        (_b = this.analytics) === null || _b === void 0 ? void 0 : _b.track(payload);
                        break;
                    case 'page':
                        (_c = this.analytics) === null || _c === void 0 ? void 0 : _c.page(payload);
                        break;
                    default:
                        break;
                }
            }
        });
    }
    flush() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            (_a = this.analytics) === null || _a === void 0 ? void 0 : _a.flush();
        });
    }
}
exports.Reporter = Reporter;
//# sourceMappingURL=reporter.js.map